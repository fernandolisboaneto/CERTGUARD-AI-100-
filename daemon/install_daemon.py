#!/usr/bin/env python3\n\"\"\"\nScript de instala√ß√£o do CertGuard Daemon\nConfigura native messaging e instala depend√™ncias\n\"\"\"\n\nimport os\nimport sys\nimport json\nimport shutil\nimport subprocess\nfrom pathlib import Path\nimport platform\n\ndef get_system_info():\n    \"\"\"Detecta informa√ß√µes do sistema\"\"\"\n    system = platform.system().lower()\n    arch = platform.machine().lower()\n    \n    return {\n        'system': system,\n        'arch': arch,\n        'python_version': sys.version_info,\n        'is_admin': os.geteuid() == 0 if hasattr(os, 'geteuid') else False\n    }\n\ndef install_dependencies():\n    \"\"\"Instala depend√™ncias Python\"\"\"\n    print(\"üì¶ Instalando depend√™ncias Python...\")\n    \n    dependencies = [\n        'PyKCS11',\n        'cryptography',\n        'requests'\n    ]\n    \n    for dep in dependencies:\n        try:\n            print(f\"  Instalando {dep}...\")\n            subprocess.check_call([\n                sys.executable, '-m', 'pip', 'install', dep\n            ])\n            print(f\"  ‚úÖ {dep} instalado\")\n        except subprocess.CalledProcessError as e:\n            print(f\"  ‚ùå Erro ao instalar {dep}: {e}\")\n            return False\n    \n    return True\n\ndef install_pkcs11_libraries():\n    \"\"\"Instala bibliotecas PKCS#11 do sistema\"\"\"\n    print(\"üîê Configurando bibliotecas PKCS#11...\")\n    \n    system_info = get_system_info()\n    \n    if system_info['system'] == 'linux':\n        return install_pkcs11_linux()\n    elif system_info['system'] == 'darwin':\n        return install_pkcs11_macos()\n    elif system_info['system'] == 'windows':\n        return install_pkcs11_windows()\n    else:\n        print(f\"  ‚ö†Ô∏è Sistema n√£o suportado: {system_info['system']}\")\n        return False\n\ndef install_pkcs11_linux():\n    \"\"\"Instala PKCS#11 no Linux\"\"\"\n    try:\n        # Detectar distribui√ß√£o\n        if shutil.which('apt-get'):\n            # Debian/Ubuntu\n            packages = [\n                'opensc',\n                'libengine-pkcs11-openssl',\n                'pcscd',\n                'pcsc-tools'\n            ]\n            \n            for package in packages:\n                print(f\"  Instalando {package}...\")\n                subprocess.check_call([\n                    'sudo', 'apt-get', 'install', '-y', package\n                ])\n                \n        elif shutil.which('yum') or shutil.which('dnf'):\n            # RedHat/CentOS/Fedora\n            cmd = 'dnf' if shutil.which('dnf') else 'yum'\n            packages = [\n                'opensc',\n                'pcsc-lite',\n                'pcsc-tools'\n            ]\n            \n            for package in packages:\n                print(f\"  Instalando {package}...\")\n                subprocess.check_call([\n                    'sudo', cmd, 'install', '-y', package\n                ])\n        \n        # Iniciar servi√ßo pcscd\n        try:\n            subprocess.check_call(['sudo', 'systemctl', 'enable', 'pcscd'])\n            subprocess.check_call(['sudo', 'systemctl', 'start', 'pcscd'])\n            print(\"  ‚úÖ Servi√ßo pcscd iniciado\")\n        except:\n            print(\"  ‚ö†Ô∏è N√£o foi poss√≠vel iniciar pcscd automaticamente\")\n        \n        return True\n        \n    except Exception as e:\n        print(f\"  ‚ùå Erro na instala√ß√£o PKCS#11 Linux: {e}\")\n        return False\n\ndef install_pkcs11_macos():\n    \"\"\"Instala PKCS#11 no macOS\"\"\"\n    try:\n        # Verificar se Homebrew est√° instalado\n        if not shutil.which('brew'):\n            print(\"  ‚ö†Ô∏è Homebrew n√£o encontrado. Instale em: https://brew.sh\")\n            return False\n        \n        packages = [\n            'opensc',\n            'pcsc-lite'\n        ]\n        \n        for package in packages:\n            print(f\"  Instalando {package}...\")\n            subprocess.check_call(['brew', 'install', package])\n        \n        print(\"  ‚úÖ PKCS#11 instalado no macOS\")\n        return True\n        \n    except Exception as e:\n        print(f\"  ‚ùå Erro na instala√ß√£o PKCS#11 macOS: {e}\")\n        return False\n\ndef install_pkcs11_windows():\n    \"\"\"Instala PKCS#11 no Windows\"\"\"\n    print(\"  ‚ÑπÔ∏è No Windows, instale manualmente:\")\n    print(\"    - SafeNet Authentication Client\")\n    print(\"    - eToken PKI Client\")\n    print(\"    - Ou driver espec√≠fico do seu token\")\n    return True\n\ndef create_native_messaging_manifest():\n    \"\"\"Cria manifest para native messaging\"\"\"\n    print(\"üìù Criando manifest de native messaging...\")\n    \n    system_info = get_system_info()\n    daemon_path = Path(__file__).parent / 'certguard_daemon.py'\n    \n    manifest = {\n        \"name\": \"com.certguard.daemon\",\n        \"description\": \"CertGuard AI Daemon for A3 certificates\",\n        \"path\": str(daemon_path.absolute()),\n        \"type\": \"stdio\",\n        \"allowed_origins\": [\n            \"chrome-extension://certguard-extension-id/\"\n        ]\n    }\n    \n    # Determinar diret√≥rio de instala√ß√£o\n    if system_info['system'] == 'linux':\n        manifest_dir = Path.home() / '.config' / 'google-chrome' / 'NativeMessagingHosts'\n    elif system_info['system'] == 'darwin':\n        manifest_dir = Path.home() / 'Library' / 'Application Support' / 'Google' / 'Chrome' / 'NativeMessagingHosts'\n    elif system_info['system'] == 'windows':\n        # Windows usa registro, mas tamb√©m suporta arquivo\n        manifest_dir = Path.home() / 'AppData' / 'Local' / 'Google' / 'Chrome' / 'User Data' / 'NativeMessagingHosts'\n    else:\n        print(f\"  ‚ùå Sistema n√£o suportado: {system_info['system']}\")\n        return False\n    \n    # Criar diret√≥rio\n    manifest_dir.mkdir(parents=True, exist_ok=True)\n    \n    # Salvar manifest\n    manifest_path = manifest_dir / 'com.certguard.daemon.json'\n    with open(manifest_path, 'w') as f:\n        json.dump(manifest, f, indent=2)\n    \n    print(f\"  ‚úÖ Manifest criado: {manifest_path}\")\n    \n    # Tornar daemon execut√°vel\n    daemon_path.chmod(0o755)\n    \n    return True\n\ndef create_desktop_entry():\n    \"\"\"Cria entrada no menu de aplica√ß√µes (Linux)\"\"\"\n    system_info = get_system_info()\n    \n    if system_info['system'] != 'linux':\n        return True\n    \n    print(\"üñ•Ô∏è Criando entrada no menu...\")\n    \n    try:\n        desktop_dir = Path.home() / '.local' / 'share' / 'applications'\n        desktop_dir.mkdir(parents=True, exist_ok=True)\n        \n        daemon_path = Path(__file__).parent / 'certguard_daemon.py'\n        \n        desktop_content = f\"\"\"[Desktop Entry]\nName=CertGuard Daemon\nComment=Daemon para certificados digitais A3\nExec={sys.executable} {daemon_path} --standalone\nIcon=security-high\nTerminal=false\nType=Application\nCategories=Security;Utility;\nStartupNotify=true\n\"\"\"\n        \n        desktop_path = desktop_dir / 'certguard-daemon.desktop'\n        with open(desktop_path, 'w') as f:\n            f.write(desktop_content)\n        \n        desktop_path.chmod(0o755)\n        \n        print(f\"  ‚úÖ Entrada criada: {desktop_path}\")\n        return True\n        \n    except Exception as e:\n        print(f\"  ‚ö†Ô∏è Erro ao criar entrada no menu: {e}\")\n        return True  # N√£o √© cr√≠tico\n\ndef create_systemd_service():\n    \"\"\"Cria servi√ßo systemd (Linux)\"\"\"\n    system_info = get_system_info()\n    \n    if system_info['system'] != 'linux':\n        return True\n    \n    print(\"üîß Criando servi√ßo systemd...\")\n    \n    try:\n        daemon_path = Path(__file__).parent / 'certguard_daemon.py'\n        \n        service_content = f\"\"\"[Unit]\nDescription=CertGuard AI Daemon\nAfter=network.target pcscd.service\nRequires=pcscd.service\n\n[Service]\nType=simple\nUser={os.getenv('USER')}\nExecStart={sys.executable} {daemon_path} --standalone\nRestart=always\nRestartSec=10\nEnvironment=DISPLAY=:0\n\n[Install]\nWantedBy=default.target\n\"\"\"\n        \n        service_dir = Path.home() / '.config' / 'systemd' / 'user'\n        service_dir.mkdir(parents=True, exist_ok=True)\n        \n        service_path = service_dir / 'certguard-daemon.service'\n        with open(service_path, 'w') as f:\n            f.write(service_content)\n        \n        # Recarregar systemd\n        subprocess.check_call(['systemctl', '--user', 'daemon-reload'])\n        \n        print(f\"  ‚úÖ Servi√ßo criado: {service_path}\")\n        print(\"  ‚ÑπÔ∏è Para iniciar: systemctl --user enable certguard-daemon\")\n        print(\"  ‚ÑπÔ∏è Para iniciar: systemctl --user start certguard-daemon\")\n        \n        return True\n        \n    except Exception as e:\n        print(f\"  ‚ö†Ô∏è Erro ao criar servi√ßo systemd: {e}\")\n        return True  # N√£o √© cr√≠tico\n\ndef create_config_directory():\n    \"\"\"Cria diret√≥rio de configura√ß√£o\"\"\"\n    print(\"üìÅ Criando diret√≥rio de configura√ß√£o...\")\n    \n    try:\n        config_dir = Path.home() / '.certguard'\n        config_dir.mkdir(parents=True, exist_ok=True)\n        \n        # Criar configura√ß√£o padr√£o\n        config_file = config_dir / 'daemon_config.json'\n        if not config_file.exists():\n            default_config = {\n                \"backend_url\": \"https://api.certguard.ai\",\n                \"user_id\": None,\n                \"api_token\": None,\n                \"auto_detect_tokens\": True,\n                \"pin_cache_timeout\": 300,\n                \"log_level\": \"INFO\",\n                \"native_messaging_port\": \"com.certguard.daemon\"\n            }\n            \n            with open(config_file, 'w') as f:\n                json.dump(default_config, f, indent=2)\n        \n        print(f\"  ‚úÖ Configura√ß√£o criada: {config_dir}\")\n        return True\n        \n    except Exception as e:\n        print(f\"  ‚ùå Erro ao criar configura√ß√£o: {e}\")\n        return False\n\ndef test_installation():\n    \"\"\"Testa a instala√ß√£o\"\"\"\n    print(\"üß™ Testando instala√ß√£o...\")\n    \n    try:\n        # Testar importa√ß√µes Python\n        try:\n            import PyKCS11\n            print(\"  ‚úÖ PyKCS11 importado\")\n        except ImportError:\n            print(\"  ‚ùå PyKCS11 n√£o encontrado\")\n            return False\n        \n        try:\n            import cryptography\n            print(\"  ‚úÖ cryptography importado\")\n        except ImportError:\n            print(\"  ‚ùå cryptography n√£o encontrado\")\n            return False\n        \n        # Testar daemon\n        daemon_path = Path(__file__).parent / 'certguard_daemon.py'\n        if daemon_path.exists():\n            print(\"  ‚úÖ Daemon encontrado\")\n        else:\n            print(\"  ‚ùå Daemon n√£o encontrado\")\n            return False\n        \n        # Testar PKCS#11\n        pkcs11_libs = [\n            '/usr/lib/libeToken.so',\n            '/usr/lib/libepsng_p11.so',\n            '/usr/lib/libcryptoki.so',\n            '/usr/lib/x86_64-linux-gnu/opensc-pkcs11.so'\n        ]\n        \n        found_lib = False\n        for lib in pkcs11_libs:\n            if os.path.exists(lib):\n                print(f\"  ‚úÖ Biblioteca PKCS#11 encontrada: {lib}\")\n                found_lib = True\n                break\n        \n        if not found_lib:\n            print(\"  ‚ö†Ô∏è Nenhuma biblioteca PKCS#11 encontrada\")\n        \n        print(\"  ‚úÖ Instala√ß√£o testada com sucesso\")\n        return True\n        \n    except Exception as e:\n        print(f\"  ‚ùå Erro no teste: {e}\")\n        return False\n\ndef print_usage_instructions():\n    \"\"\"Imprime instru√ß√µes de uso\"\"\"\n    print(\"\\nüìã INSTRU√á√ïES DE USO:\")\n    print(\"\\n1. üîå Para usar com extens√£o:\")\n    print(\"   - Instale a extens√£o CertGuard no Chrome/Edge\")\n    print(\"   - O daemon ser√° iniciado automaticamente\")\n    \n    print(\"\\n2. üñ•Ô∏è Para usar standalone:\")\n    print(f\"   python3 {Path(__file__).parent / 'certguard_daemon.py'} --standalone\")\n    \n    print(\"\\n3. üîß Para usar como servi√ßo (Linux):\")\n    print(\"   systemctl --user enable certguard-daemon\")\n    print(\"   systemctl --user start certguard-daemon\")\n    \n    print(\"\\n4. ‚öôÔ∏è Configura√ß√£o:\")\n    print(f\"   Edite: {Path.home() / '.certguard' / 'daemon_config.json'}\")\n    \n    print(\"\\n5. üìù Logs:\")\n    print(\"   /tmp/certguard_daemon.log\")\n    \n    print(\"\\n6. üÜò Suporte:\")\n    print(\"   - Verifique se o token est√° inserido\")\n    print(\"   - Teste com: pcsc_scan\")\n    print(\"   - Verifique logs para erros\")\n\ndef main():\n    \"\"\"Fun√ß√£o principal de instala√ß√£o\"\"\"\n    print(\"üöÄ CertGuard Daemon - Instalador\")\n    print(\"=\" * 40)\n    \n    system_info = get_system_info()\n    print(f\"Sistema: {system_info['system']} {system_info['arch']}\")\n    print(f\"Python: {'.'.join(map(str, system_info['python_version'][:3]))}\")\n    \n    if system_info['python_version'] < (3, 7):\n        print(\"‚ùå Python 3.7+ √© necess√°rio\")\n        sys.exit(1)\n    \n    print(\"\\nüì¶ Iniciando instala√ß√£o...\")\n    \n    steps = [\n        (\"Criando diret√≥rio de configura√ß√£o\", create_config_directory),\n        (\"Instalando depend√™ncias Python\", install_dependencies),\n        (\"Configurando PKCS#11\", install_pkcs11_libraries),\n        (\"Criando manifest de native messaging\", create_native_messaging_manifest),\n        (\"Criando entrada no menu\", create_desktop_entry),\n        (\"Criando servi√ßo systemd\", create_systemd_service),\n        (\"Testando instala√ß√£o\", test_installation)\n    ]\n    \n    success_count = 0\n    \n    for step_name, step_func in steps:\n        print(f\"\\n{step_name}...\")\n        try:\n            if step_func():\n                success_count += 1\n            else:\n                print(f\"  ‚ö†Ô∏è {step_name} falhou\")\n        except Exception as e:\n            print(f\"  ‚ùå Erro em {step_name}: {e}\")\n    \n    print(\"\\n\" + \"=\" * 40)\n    \n    if success_count == len(steps):\n        print(\"‚úÖ Instala√ß√£o conclu√≠da com sucesso!\")\n        print_usage_instructions()\n    elif success_count >= len(steps) - 2:\n        print(\"‚ö†Ô∏è Instala√ß√£o conclu√≠da com avisos\")\n        print(\"Algumas funcionalidades podem n√£o estar dispon√≠veis\")\n        print_usage_instructions()\n    else:\n        print(\"‚ùå Instala√ß√£o falhou\")\n        print(\"Verifique os erros acima e tente novamente\")\n        sys.exit(1)\n\nif __name__ == '__main__':\n    main()

