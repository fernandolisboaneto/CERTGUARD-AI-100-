/**
 * CertGuard AI Extension - Content Script
 * Detecta tribunais e automatiza autentica√ß√£o com certificados digitais
 */

class CertGuardContentScript {
    constructor() {
        this.isHomologatedSite = false;
        this.tribunalInfo = null;
        this.authenticationInProgress = false;
        this.observerActive = false;
        
        this.init();
    }
    
    init() {
        console.log('üöÄ CertGuard Content Script iniciado em:', window.location.hostname);
        
        // Verificar se √© um site homologado
        this.checkHomologatedSite();
        
        // Configurar listeners
        this.setupEventListeners();
        
        // Observar mudan√ßas no DOM
        this.setupDOMObserver();
        
        // Detectar formul√°rios de login
        this.detectLoginForms();
    }
    
    checkHomologatedSite() {
        const hostname = window.location.hostname.toLowerCase();
        
        const tribunals = {\n            'tjrj.jus.br': {\n                name: 'TJ-RJ',\n                fullName: 'Tribunal de Justi√ßa do Rio de Janeiro',\n                type: 'estadual',\n                loginSelectors: ['#login', '.login-form', '[name=\"usuario\"]', '[name=\"login\"]'],\n                passwordSelectors: ['[name=\"senha\"]', '[name=\"password\"]', '[type=\"password\"]'],\n                submitSelectors: ['[type=\"submit\"]', '.btn-login', '#btnLogin']\n            },\n            'tjsp.jus.br': {\n                name: 'TJSP',\n                fullName: 'Tribunal de Justi√ßa de S√£o Paulo',\n                type: 'estadual',\n                loginSelectors: ['#usuario', '[name=\"usuario\"]', '[name=\"login\"]'],\n                passwordSelectors: ['#senha', '[name=\"senha\"]', '[type=\"password\"]'],\n                submitSelectors: ['#entrar', '[type=\"submit\"]', '.botao-entrar']\n            },\n            'trf2.jus.br': {\n                name: 'TRF-2',\n                fullName: 'Tribunal Regional Federal da 2¬™ Regi√£o',\n                type: 'federal',\n                loginSelectors: ['[name=\"j_username\"]', '[name=\"usuario\"]'],\n                passwordSelectors: ['[name=\"j_password\"]', '[name=\"senha\"]'],\n                submitSelectors: ['[type=\"submit\"]', '.btn-primary']\n            },\n            'pje.jus.br': {\n                name: 'PJe',\n                fullName: 'Processo Judicial Eletr√¥nico',\n                type: 'unificado',\n                loginSelectors: ['#username', '[name=\"username\"]', '[name=\"usuario\"]'],\n                passwordSelectors: ['#password', '[name=\"password\"]', '[name=\"senha\"]'],\n                submitSelectors: ['#btnEntrar', '[type=\"submit\"]']\n            },\n            'esaj.tjsp.jus.br': {\n                name: 'E-SAJ',\n                fullName: 'Sistema de Automa√ß√£o da Justi√ßa',\n                type: 'estadual',\n                loginSelectors: ['#nuUsuario', '[name=\"usuario\"]'],\n                passwordSelectors: ['#nuSenha', '[name=\"senha\"]'],\n                submitSelectors: ['#btnEntrar', '[value=\"Entrar\"]']\n            },\n            'projudi.tjrj.jus.br': {\n                name: 'PROJUDI',\n                fullName: 'Processo Judicial Digital',\n                type: 'estadual',\n                loginSelectors: ['[name=\"usuario\"]', '#usuario'],\n                passwordSelectors: ['[name=\"senha\"]', '#senha'],\n                submitSelectors: ['[type=\"submit\"]', '#entrar']\n            }\n        };\n        \n        for (const [domain, info] of Object.entries(tribunals)) {\n            if (hostname.includes(domain)) {\n                this.isHomologatedSite = true;\n                this.tribunalInfo = {\n                    ...info,\n                    domain,\n                    url: window.location.href,\n                    detectedAt: new Date().toISOString()\n                };\n                \n                console.log('‚úÖ Tribunal detectado:', this.tribunalInfo.name);\n                \n                // Notificar background script\n                this.notifyTribunalDetection();\n                \n                // Adicionar indicador visual\n                this.addVisualIndicator();\n                \n                break;\n            }\n        }\n        \n        if (!this.isHomologatedSite) {\n            console.log('‚ÑπÔ∏è Site n√£o homologado:', hostname);\n        }\n    }\n    \n    setupEventListeners() {\n        // Listener para mensagens do background script\n        chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n            this.handleMessage(message, sender, sendResponse);\n            return true;\n        });\n        \n        // Listener para mudan√ßas de URL (SPAs)\n        let lastUrl = location.href;\n        new MutationObserver(() => {\n            const url = location.href;\n            if (url !== lastUrl) {\n                lastUrl = url;\n                console.log('üîÑ URL mudou:', url);\n                this.handleUrlChange();\n            }\n        }).observe(document, { subtree: true, childList: true });\n    }\n    \n    setupDOMObserver() {\n        if (this.observerActive) return;\n        \n        const observer = new MutationObserver((mutations) => {\n            let shouldCheckForms = false;\n            \n            mutations.forEach((mutation) => {\n                if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {\n                    shouldCheckForms = true;\n                }\n            });\n            \n            if (shouldCheckForms) {\n                this.detectLoginForms();\n            }\n        });\n        \n        observer.observe(document.body, {\n            childList: true,\n            subtree: true\n        });\n        \n        this.observerActive = true;\n        console.log('üëÅÔ∏è Observer do DOM ativado');\n    }\n    \n    detectLoginForms() {\n        if (!this.isHomologatedSite || !this.tribunalInfo) return;\n        \n        const { loginSelectors, passwordSelectors, submitSelectors } = this.tribunalInfo;\n        \n        // Procurar campos de login\n        let loginField = null;\n        let passwordField = null;\n        let submitButton = null;\n        \n        for (const selector of loginSelectors) {\n            loginField = document.querySelector(selector);\n            if (loginField) break;\n        }\n        \n        for (const selector of passwordSelectors) {\n            passwordField = document.querySelector(selector);\n            if (passwordField) break;\n        }\n        \n        for (const selector of submitSelectors) {\n            submitButton = document.querySelector(selector);\n            if (submitButton) break;\n        }\n        \n        if (loginField && passwordField) {\n            console.log('üîç Formul√°rio de login detectado');\n            this.enhanceLoginForm(loginField, passwordField, submitButton);\n        }\n    }\n    \n    enhanceLoginForm(loginField, passwordField, submitButton) {\n        // Verificar se j√° foi aprimorado\n        if (loginField.dataset.certguardEnhanced) return;\n        \n        // Marcar como aprimorado\n        loginField.dataset.certguardEnhanced = 'true';\n        passwordField.dataset.certguardEnhanced = 'true';\n        \n        // Adicionar bot√£o de autentica√ß√£o com certificado\n        this.addCertificateButton(loginField, passwordField, submitButton);\n        \n        // Adicionar listeners para detec√ß√£o de tentativas de login\n        this.addLoginDetection(loginField, passwordField, submitButton);\n        \n        console.log('‚ú® Formul√°rio de login aprimorado');\n    }\n    \n    addCertificateButton(loginField, passwordField, submitButton) {\n        // Criar bot√£o de certificado\n        const certButton = document.createElement('button');\n        certButton.type = 'button';\n        certButton.className = 'certguard-cert-btn';\n        certButton.innerHTML = 'üõ°Ô∏è Entrar com Certificado Digital';\n        certButton.style.cssText = `\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            color: white;\n            border: none;\n            padding: 10px 20px;\n            border-radius: 6px;\n            font-size: 14px;\n            font-weight: 500;\n            cursor: pointer;\n            margin: 10px 0;\n            width: 100%;\n            transition: all 0.2s;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n        `;\n        \n        // Hover effect\n        certButton.addEventListener('mouseenter', () => {\n            certButton.style.transform = 'translateY(-1px)';\n            certButton.style.boxShadow = '0 4px 8px rgba(0,0,0,0.15)';\n        });\n        \n        certButton.addEventListener('mouseleave', () => {\n            certButton.style.transform = 'translateY(0)';\n            certButton.style.boxShadow = '0 2px 4px rgba(0,0,0,0.1)';\n        });\n        \n        // Click handler\n        certButton.addEventListener('click', () => {\n            this.authenticateWithCertificate();\n        });\n        \n        // Inserir bot√£o ap√≥s o campo de senha\n        const container = passwordField.parentElement;\n        container.insertBefore(certButton, passwordField.nextSibling);\n        \n        console.log('üîò Bot√£o de certificado adicionado');\n    }\n    \n    addLoginDetection(loginField, passwordField, submitButton) {\n        const detectLogin = () => {\n            if (loginField.value && passwordField.value) {\n                console.log('üîç Tentativa de login detectada');\n                this.logLoginAttempt('manual', {\n                    username: loginField.value,\n                    hasPassword: !!passwordField.value\n                });\n            }\n        };\n        \n        if (submitButton) {\n            submitButton.addEventListener('click', detectLogin);\n        }\n        \n        // Detectar Enter nos campos\n        [loginField, passwordField].forEach(field => {\n            field.addEventListener('keypress', (e) => {\n                if (e.key === 'Enter') {\n                    detectLogin();\n                }\n            });\n        });\n    }\n    \n    async authenticateWithCertificate() {\n        if (this.authenticationInProgress) {\n            console.log('‚è≥ Autentica√ß√£o j√° em andamento');\n            return;\n        }\n        \n        this.authenticationInProgress = true;\n        \n        try {\n            console.log('üîê Iniciando autentica√ß√£o com certificado');\n            \n            // Mostrar indicador de carregamento\n            this.showAuthenticationProgress();\n            \n            // Solicitar autentica√ß√£o ao background script\n            const response = await chrome.runtime.sendMessage({\n                action: 'authenticate',\n                siteUrl: window.location.href,\n                tribunal: this.tribunalInfo,\n                timestamp: new Date().toISOString()\n            });\n            \n            if (response.success) {\n                console.log('‚úÖ Autentica√ß√£o bem-sucedida:', response);\n                \n                // Processar resposta baseada no tipo de certificado\n                if (response.certificateType === 'A1') {\n                    await this.processA1Authentication(response);\n                } else {\n                    await this.processA3Authentication(response);\n                }\n                \n                this.showAuthenticationSuccess();\n                \n            } else {\n                throw new Error(response.error || 'Falha na autentica√ß√£o');\n            }\n            \n        } catch (error) {\n            console.error('‚ùå Erro na autentica√ß√£o:', error);\n            this.showAuthenticationError(error.message);\n        } finally {\n            this.authenticationInProgress = false;\n            this.hideAuthenticationProgress();\n        }\n    }\n    \n    async processA1Authentication(response) {\n        console.log('üîê Processando autentica√ß√£o A1 (HSM)');\n        \n        // Em produ√ß√£o, o backend j√° teria feito a assinatura via HSM\n        // Aqui simulamos a inje√ß√£o do certificado no formul√°rio\n        \n        const loginField = document.querySelector(this.tribunalInfo.loginSelectors.join(','));\n        const passwordField = document.querySelector(this.tribunalInfo.passwordSelectors.join(','));\n        \n        if (loginField && passwordField) {\n            // Simular preenchimento com dados do certificado\n            loginField.value = response.certificateInfo.serial;\n            passwordField.value = 'cert-auth-' + response.sessionId;\n            \n            // Disparar eventos para frameworks JS\n            ['input', 'change'].forEach(eventType => {\n                loginField.dispatchEvent(new Event(eventType, { bubbles: true }));\n                passwordField.dispatchEvent(new Event(eventType, { bubbles: true }));\n            });\n            \n            // Auto-submit ap√≥s delay\n            setTimeout(() => {\n                const submitButton = document.querySelector(this.tribunalInfo.submitSelectors.join(','));\n                if (submitButton) {\n                    submitButton.click();\n                }\n            }, 1000);\n        }\n    }\n    \n    async processA3Authentication(response) {\n        console.log('üîê Processando autentica√ß√£o A3 (Token/Cart√£o)');\n        \n        // Em produ√ß√£o, o daemon local j√° teria processado a assinatura\n        // Aqui simulamos o processo\n        \n        // Mostrar modal de inser√ß√£o de token/cart√£o\n        this.showTokenInsertionModal(response);\n    }\n    \n    showTokenInsertionModal(response) {\n        const modal = document.createElement('div');\n        modal.className = 'certguard-modal';\n        modal.innerHTML = `\n            <div class=\"certguard-modal-content\">\n                <div class=\"certguard-modal-header\">\n                    <h3>üîê Autentica√ß√£o A3</h3>\n                </div>\n                <div class=\"certguard-modal-body\">\n                    <p>Insira seu token ou cart√£o inteligente e digite o PIN:</p>\n                    <input type=\"password\" id=\"certguard-pin\" placeholder=\"Digite seu PIN\" maxlength=\"8\">\n                    <div class=\"certguard-cert-info\">\n                        <strong>Certificado:</strong> ${response.certificateInfo.owner}<br>\n                        <strong>Tipo:</strong> ${response.certificateInfo.type}<br>\n                        <strong>Validade:</strong> ${response.certificateInfo.expiry}\n                    </div>\n                </div>\n                <div class=\"certguard-modal-footer\">\n                    <button id=\"certguard-confirm-pin\">Confirmar</button>\n                    <button id=\"certguard-cancel-pin\">Cancelar</button>\n                </div>\n            </div>\n        `;\n        \n        // Estilos do modal\n        const style = document.createElement('style');\n        style.textContent = `\n            .certguard-modal {\n                position: fixed;\n                top: 0;\n                left: 0;\n                width: 100%;\n                height: 100%;\n                background: rgba(0,0,0,0.5);\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                z-index: 10000;\n                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n            }\n            .certguard-modal-content {\n                background: white;\n                border-radius: 8px;\n                padding: 0;\n                max-width: 400px;\n                width: 90%;\n                box-shadow: 0 10px 25px rgba(0,0,0,0.2);\n            }\n            .certguard-modal-header {\n                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n                color: white;\n                padding: 20px;\n                border-radius: 8px 8px 0 0;\n            }\n            .certguard-modal-header h3 {\n                margin: 0;\n                font-size: 18px;\n            }\n            .certguard-modal-body {\n                padding: 20px;\n            }\n            .certguard-modal-body input {\n                width: 100%;\n                padding: 10px;\n                border: 1px solid #ddd;\n                border-radius: 4px;\n                margin: 10px 0;\n                font-size: 16px;\n            }\n            .certguard-cert-info {\n                background: #f5f5f5;\n                padding: 10px;\n                border-radius: 4px;\n                margin: 10px 0;\n                font-size: 12px;\n                line-height: 1.4;\n            }\n            .certguard-modal-footer {\n                padding: 20px;\n                text-align: right;\n                border-top: 1px solid #eee;\n            }\n            .certguard-modal-footer button {\n                padding: 8px 16px;\n                margin-left: 10px;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                font-size: 14px;\n            }\n            #certguard-confirm-pin {\n                background: #4ade80;\n                color: white;\n            }\n            #certguard-cancel-pin {\n                background: #ef4444;\n                color: white;\n            }\n        `;\n        \n        document.head.appendChild(style);\n        document.body.appendChild(modal);\n        \n        // Event listeners\n        document.getElementById('certguard-confirm-pin').addEventListener('click', () => {\n            const pin = document.getElementById('certguard-pin').value;\n            if (pin.length >= 4) {\n                this.processA3WithPin(pin, response);\n                document.body.removeChild(modal);\n                document.head.removeChild(style);\n            } else {\n                alert('PIN deve ter pelo menos 4 d√≠gitos');\n            }\n        });\n        \n        document.getElementById('certguard-cancel-pin').addEventListener('click', () => {\n            document.body.removeChild(modal);\n            document.head.removeChild(style);\n        });\n        \n        // Focar no campo PIN\n        setTimeout(() => {\n            document.getElementById('certguard-pin').focus();\n        }, 100);\n    }\n    \n    async processA3WithPin(pin, response) {\n        console.log('üîê Processando A3 com PIN');\n        \n        // Simular valida√ß√£o do PIN e assinatura\n        await this.delay(2000);\n        \n        // Preencher formul√°rio com dados do certificado\n        const loginField = document.querySelector(this.tribunalInfo.loginSelectors.join(','));\n        const passwordField = document.querySelector(this.tribunalInfo.passwordSelectors.join(','));\n        \n        if (loginField && passwordField) {\n            loginField.value = response.certificateInfo.serial;\n            passwordField.value = 'a3-auth-' + response.sessionId;\n            \n            // Disparar eventos\n            ['input', 'change'].forEach(eventType => {\n                loginField.dispatchEvent(new Event(eventType, { bubbles: true }));\n                passwordField.dispatchEvent(new Event(eventType, { bubbles: true }));\n            });\n            \n            // Auto-submit\n            setTimeout(() => {\n                const submitButton = document.querySelector(this.tribunalInfo.submitSelectors.join(','));\n                if (submitButton) {\n                    submitButton.click();\n                }\n            }, 1000);\n        }\n    }\n    \n    handleMessage(message, sender, sendResponse) {\n        console.log('üì® Mensagem recebida:', message.action);\n        \n        switch (message.action) {\n            case 'injectCertificate':\n                this.injectCertificateData(message);\n                sendResponse({ success: true });\n                break;\n                \n            case 'getTribunalInfo':\n                sendResponse({\n                    success: true,\n                    tribunalInfo: this.tribunalInfo,\n                    isHomologated: this.isHomologatedSite\n                });\n                break;\n                \n            case 'captureScreen':\n                this.captureScreenForAudit();\n                sendResponse({ success: true });\n                break;\n                \n            default:\n                sendResponse({ success: false, error: 'A√ß√£o n√£o reconhecida' });\n        }\n    }\n    \n    injectCertificateData(message) {\n        console.log('üíâ Injetando dados do certificado:', message.certificateData);\n        \n        // Log de auditoria\n        this.logLoginAttempt('certificate', {\n            certificateType: message.authMethod,\n            certificateSerial: message.certificateData.serial,\n            sessionId: message.sessionId\n        });\n    }\n    \n    notifyTribunalDetection() {\n        chrome.runtime.sendMessage({\n            action: 'siteDetected',\n            siteInfo: {\n                hostname: window.location.hostname,\n                tribunal: this.tribunalInfo.name,\n                isHomologated: true,\n                detectedAt: new Date().toISOString()\n            }\n        });\n    }\n    \n    addVisualIndicator() {\n        // Adicionar indicador visual discreto\n        const indicator = document.createElement('div');\n        indicator.id = 'certguard-indicator';\n        indicator.innerHTML = 'üõ°Ô∏è CertGuard AI Ativo';\n        indicator.style.cssText = `\n            position: fixed;\n            top: 10px;\n            right: 10px;\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            color: white;\n            padding: 8px 12px;\n            border-radius: 20px;\n            font-size: 12px;\n            font-weight: 500;\n            z-index: 9999;\n            box-shadow: 0 2px 8px rgba(0,0,0,0.2);\n            opacity: 0.9;\n            transition: opacity 0.3s;\n        `;\n        \n        indicator.addEventListener('mouseenter', () => {\n            indicator.style.opacity = '1';\n        });\n        \n        indicator.addEventListener('mouseleave', () => {\n            indicator.style.opacity = '0.9';\n        });\n        \n        document.body.appendChild(indicator);\n        \n        // Remover ap√≥s 5 segundos\n        setTimeout(() => {\n            if (indicator.parentElement) {\n                indicator.parentElement.removeChild(indicator);\n            }\n        }, 5000);\n    }\n    \n    showAuthenticationProgress() {\n        const progress = document.createElement('div');\n        progress.id = 'certguard-progress';\n        progress.innerHTML = `\n            <div class=\"certguard-progress-content\">\n                <div class=\"certguard-spinner\"></div>\n                <p>Autenticando com certificado digital...</p>\n            </div>\n        `;\n        \n        const style = document.createElement('style');\n        style.textContent = `\n            #certguard-progress {\n                position: fixed;\n                top: 0;\n                left: 0;\n                width: 100%;\n                height: 100%;\n                background: rgba(0,0,0,0.7);\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                z-index: 10001;\n                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n            }\n            .certguard-progress-content {\n                background: white;\n                padding: 30px;\n                border-radius: 8px;\n                text-align: center;\n                box-shadow: 0 10px 25px rgba(0,0,0,0.2);\n            }\n            .certguard-spinner {\n                width: 40px;\n                height: 40px;\n                border: 4px solid #f3f3f3;\n                border-top: 4px solid #667eea;\n                border-radius: 50%;\n                animation: spin 1s linear infinite;\n                margin: 0 auto 20px;\n            }\n            @keyframes spin {\n                0% { transform: rotate(0deg); }\n                100% { transform: rotate(360deg); }\n            }\n        `;\n        \n        document.head.appendChild(style);\n        document.body.appendChild(progress);\n    }\n    \n    hideAuthenticationProgress() {\n        const progress = document.getElementById('certguard-progress');\n        if (progress) {\n            progress.parentElement.removeChild(progress);\n        }\n    }\n    \n    showAuthenticationSuccess() {\n        this.showNotification('‚úÖ Autentica√ß√£o realizada com sucesso!', 'success');\n    }\n    \n    showAuthenticationError(message) {\n        this.showNotification('‚ùå Erro na autentica√ß√£o: ' + message, 'error');\n    }\n    \n    showNotification(message, type) {\n        const notification = document.createElement('div');\n        notification.className = `certguard-notification certguard-${type}`;\n        notification.textContent = message;\n        notification.style.cssText = `\n            position: fixed;\n            top: 20px;\n            right: 20px;\n            padding: 15px 20px;\n            border-radius: 6px;\n            color: white;\n            font-size: 14px;\n            font-weight: 500;\n            z-index: 10002;\n            max-width: 300px;\n            box-shadow: 0 4px 12px rgba(0,0,0,0.2);\n            animation: slideIn 0.3s ease-out;\n        `;\n        \n        if (type === 'success') {\n            notification.style.background = '#4ade80';\n        } else {\n            notification.style.background = '#ef4444';\n        }\n        \n        const style = document.createElement('style');\n        style.textContent = `\n            @keyframes slideIn {\n                from {\n                    transform: translateX(100%);\n                    opacity: 0;\n                }\n                to {\n                    transform: translateX(0);\n                    opacity: 1;\n                }\n            }\n        `;\n        \n        document.head.appendChild(style);\n        document.body.appendChild(notification);\n        \n        // Remover ap√≥s 4 segundos\n        setTimeout(() => {\n            if (notification.parentElement) {\n                notification.style.animation = 'slideIn 0.3s ease-out reverse';\n                setTimeout(() => {\n                    if (notification.parentElement) {\n                        notification.parentElement.removeChild(notification);\n                    }\n                    if (style.parentElement) {\n                        style.parentElement.removeChild(style);\n                    }\n                }, 300);\n            }\n        }, 4000);\n    }\n    \n    logLoginAttempt(type, data) {\n        const logEntry = {\n            type,\n            data,\n            tribunal: this.tribunalInfo?.name,\n            url: window.location.href,\n            timestamp: new Date().toISOString(),\n            userAgent: navigator.userAgent\n        };\n        \n        console.log('üìù Login attempt logged:', logEntry);\n        \n        // Enviar para background script\n        chrome.runtime.sendMessage({\n            action: 'logLoginAttempt',\n            logEntry\n        });\n    }\n    \n    captureScreenForAudit() {\n        // Em produ√ß√£o, capturaria screenshot da p√°gina\n        console.log('üì∏ Captura de tela para auditoria');\n        \n        // Simular captura\n        const captureData = {\n            url: window.location.href,\n            timestamp: new Date().toISOString(),\n            tribunal: this.tribunalInfo?.name,\n            pageTitle: document.title\n        };\n        \n        chrome.runtime.sendMessage({\n            action: 'screenCaptured',\n            captureData\n        });\n    }\n    \n    handleUrlChange() {\n        // Redetectar formul√°rios ap√≥s mudan√ßa de URL\n        setTimeout(() => {\n            this.detectLoginForms();\n        }, 1000);\n    }\n    \n    delay(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n}\n\n// Inicializar content script\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', () => {\n        new CertGuardContentScript();\n    });\n} else {\n    new CertGuardContentScript();\n}

