/**
 * CertGuard AI - LucIA Advanced Features
 * Funcionalidades avan√ßadas de IA, an√°lise comportamental e auditoria
 */

// Configura√ß√£o da API
const API_BASE_URL = 'http://localhost:5000/api';

// Cache de dados
let securityCache = {
    recentEvents: [],
    userProfiles: {},
    anomalies: [],
    lastUpdate: null
};

/**
 * Faz pergunta avan√ßada √† LucIA
 */
async function askAdvancedLucia() {
    const question = document.getElementById('luciaQuestion').value;
    if (!question.trim()) {
        alert('Por favor, digite uma pergunta');
        return;
    }

    const chatContainer = document.getElementById('luciaChat');
    
    // Adiciona pergunta do usu√°rio
    chatContainer.innerHTML += `
        <div class="mb-4 text-right">
            <div class="inline-block bg-blue-500 text-white p-3 rounded-lg max-w-xs">
                ${question}
            </div>
        </div>
    `;

    // Mostra loading
    chatContainer.innerHTML += `
        <div class="mb-4" id="loading">
            <div class="inline-block bg-gray-200 p-3 rounded-lg">
                <div class="flex items-center space-x-2">
                    <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-500"></div>
                    <span>LucIA est√° analisando dados em tempo real...</span>
                </div>
            </div>
        </div>
    `;

    chatContainer.scrollTop = chatContainer.scrollHeight;

    try {
        // Faz an√°lise avan√ßada baseada na pergunta
        const response = await analyzeSecurityQuestion(question);
        
        // Remove loading
        document.getElementById('loading').remove();
        
        // Adiciona resposta da LucIA
        chatContainer.innerHTML += `
            <div class="mb-4">
                <div class="flex items-start space-x-3">
                    <div class="w-8 h-8 bg-purple-500 rounded-full flex items-center justify-center text-white text-sm font-bold">
                        L
                    </div>
                    <div class="bg-gray-100 p-3 rounded-lg max-w-md">
                        <div class="text-sm text-gray-600 mb-1">LucIA - Assistente de Seguran√ßa IA</div>
                        <div class="whitespace-pre-line">${response}</div>
                        <div class="text-xs text-gray-500 mt-2">
                            An√°lise baseada em ${getAnalysisDataSources(question).join(', ')}
                        </div>
                    </div>
                </div>
            </div>
        `;

        chatContainer.scrollTop = chatContainer.scrollHeight;
        document.getElementById('luciaQuestion').value = '';

    } catch (error) {
        document.getElementById('loading').remove();
        chatContainer.innerHTML += `
            <div class="mb-4">
                <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
                    Erro ao processar pergunta: ${error.message}
                </div>
            </div>
        `;
    }
}

/**
 * Analisa pergunta de seguran√ßa usando dados reais
 */
async function analyzeSecurityQuestion(question) {
    const questionLower = question.toLowerCase();
    
    // Atualiza cache de dados se necess√°rio
    await updateSecurityCache();
    
    // An√°lise de acessos de usu√°rios
    if (questionLower.includes('quem') && (questionLower.includes('acessou') || questionLower.includes('logou'))) {
        return await analyzeUserAccess(question);
    }
    
    // An√°lise de IPs suspeitos
    if (questionLower.includes('ip') && (questionLower.includes('diferente') || questionLower.includes('suspeito'))) {
        return await analyzeIPActivity(question);
    }
    
    // An√°lise de certificados
    if (questionLower.includes('certificado') || questionLower.includes('assinatura')) {
        return await analyzeCertificateUsage(question);
    }
    
    // An√°lise de hor√°rios
    if (questionLower.includes('hor√°rio') && (questionLower.includes('estranho') || questionLower.includes('fora'))) {
        return await analyzeTimePatterns(question);
    }
    
    // An√°lise de performance
    if (questionLower.includes('performance') || questionLower.includes('lento')) {
        return await analyzePerformance(question);
    }
    
    // Relat√≥rios e estat√≠sticas
    if (questionLower.includes('relat√≥rio') || questionLower.includes('estat√≠stica')) {
        return await generateSecurityReport(question);
    }
    
    // An√°lise de anomalias
    if (questionLower.includes('anomalia') || questionLower.includes('suspeito')) {
        return await analyzeAnomalies(question);
    }
    
    // An√°lise geral
    return await generateGeneralAnalysis(question);
}

/**
 * Analisa acessos de usu√°rios
 */
async function analyzeUserAccess(question) {
    const userData = await getUserActivityData();
    
    let response = "üîç **An√°lise de Acessos de Usu√°rios**\n\n";
    
    // √öltimos acessos
    response += "**Atividade Recente (√öltimas 24h):**\n";
    userData.recentActivity.forEach(user => {
        const status = user.suspicious ? "‚ö†Ô∏è" : "‚úÖ";
        response += `${status} ${user.name} (${user.username})\n`;
        response += `   ‚Ä¢ ${user.loginCount} acessos de ${user.uniqueIPs} IPs diferentes\n`;
        response += `   ‚Ä¢ √öltimo acesso: ${user.lastLogin}\n`;
        if (user.suspicious) {
            response += `   ‚Ä¢ üö® ALERTA: ${user.suspiciousReason}\n`;
        }
        response += "\n";
    });
    
    // Alertas de seguran√ßa
    const alerts = userData.securityAlerts;
    if (alerts.length > 0) {
        response += "**üö® Alertas de Seguran√ßa:**\n";
        alerts.forEach(alert => {
            response += `‚Ä¢ ${alert.severity.toUpperCase()}: ${alert.description}\n`;
        });
        response += "\n";
    }
    
    response += "**Recomenda√ß√µes:**\n";
    response += "‚Ä¢ Monitorar usu√°rios com m√∫ltiplos IPs\n";
    response += "‚Ä¢ Investigar tentativas de login falhadas\n";
    response += "‚Ä¢ Implementar MFA para usu√°rios de alto risco";
    
    return response;
}

/**
 * Analisa atividade de IPs
 */
async function analyzeIPActivity(question) {
    const ipData = await getIPAnalysisData();
    
    let response = "üåê **An√°lise de Atividade de IPs**\n\n";
    
    // IPs suspeitos
    response += "**IPs com Atividade Suspeita:**\n";
    ipData.suspiciousIPs.forEach(ip => {
        response += `üö® ${ip.address} (${ip.location})\n`;
        response += `   ‚Ä¢ ${ip.attempts} tentativas, ${ip.failures} falhas\n`;
        response += `   ‚Ä¢ Usu√°rios afetados: ${ip.users.join(', ')}\n`;
        response += `   ‚Ä¢ Risco: ${ip.riskLevel}\n\n`;
    });
    
    // Geolocaliza√ß√£o an√¥mala
    if (ipData.geoAnomalies.length > 0) {
        response += "**Anomalias Geogr√°ficas:**\n";
        ipData.geoAnomalies.forEach(anomaly => {
            response += `‚Ä¢ ${anomaly.user}: Acesso de ${anomaly.country} (incomum)\n`;
        });
        response += "\n";
    }
    
    // Estat√≠sticas
    response += "**Estat√≠sticas:**\n";
    response += `‚Ä¢ Total de IPs √∫nicos: ${ipData.totalUniqueIPs}\n`;
    response += `‚Ä¢ IPs bloqueados: ${ipData.blockedIPs}\n`;
    response += `‚Ä¢ Taxa de sucesso m√©dia: ${ipData.successRate}%\n\n`;
    
    response += "**A√ß√µes Recomendadas:**\n";
    response += "‚Ä¢ Bloquear IPs com alta taxa de falha\n";
    response += "‚Ä¢ Implementar geo-blocking para pa√≠ses de risco\n";
    response += "‚Ä¢ Configurar alertas para novos IPs por usu√°rio";
    
    return response;
}

/**
 * Analisa uso de certificados
 */
async function analyzeCertificateUsage(question) {
    const certData = await getCertificateAnalysisData();
    
    let response = "üìú **An√°lise de Uso de Certificados**\n\n";
    
    // Status dos certificados
    response += "**Status dos Certificados:**\n";
    certData.certificates.forEach(cert => {
        const statusIcon = cert.status === 'active' ? '‚úÖ' : cert.status === 'expired' ? '‚è∞' : '‚ùå';
        response += `${statusIcon} ${cert.subjectName}\n`;
        response += `   ‚Ä¢ Tipo: ${cert.type} | Serial: ${cert.serialNumber}\n`;
        response += `   ‚Ä¢ Uso recente: ${cert.recentUsage} assinaturas\n`;
        response += `   ‚Ä¢ V√°lido at√©: ${cert.validUntil}\n`;
        if (cert.alerts.length > 0) {
            response += `   ‚Ä¢ ‚ö†Ô∏è ${cert.alerts.join(', ')}\n`;
        }
        response += "\n";
    });
    
    // Atividade suspeita
    if (certData.suspiciousActivity.length > 0) {
        response += "**üö® Atividade Suspeita:**\n";
        certData.suspiciousActivity.forEach(activity => {
            response += `‚Ä¢ ${activity.description}\n`;
            response += `  Usu√°rio: ${activity.user} | Hor√°rio: ${activity.timestamp}\n`;
        });
        response += "\n";
    }
    
    // M√©tricas de uso
    response += "**M√©tricas de Uso:**\n";
    response += `‚Ä¢ Total de assinaturas hoje: ${certData.metrics.totalSignatures}\n`;
    response += `‚Ä¢ Certificado mais usado: ${certData.metrics.mostUsed}\n`;
    response += `‚Ä¢ Tempo m√©dio de assinatura: ${certData.metrics.avgSignTime}s\n\n`;
    
    response += "**Recomenda√ß√µes:**\n";
    response += "‚Ä¢ Renovar certificados pr√≥ximos ao vencimento\n";
    response += "‚Ä¢ Monitorar uso de certificados revogados\n";
    response += "‚Ä¢ Implementar alertas para uso fora do hor√°rio";
    
    return response;
}

/**
 * Analisa padr√µes temporais
 */
async function analyzeTimePatterns(question) {
    const timeData = await getTimeAnalysisData();
    
    let response = "üïê **An√°lise de Padr√µes Temporais**\n\n";
    
    // Atividades fora do hor√°rio
    response += "**Atividades Fora do Hor√°rio Comercial:**\n";
    timeData.offHoursActivity.forEach(activity => {
        const riskIcon = activity.riskLevel === 'high' ? 'üö®' : activity.riskLevel === 'medium' ? '‚ö†Ô∏è' : '‚ÑπÔ∏è';
        response += `${riskIcon} ${activity.timestamp} - ${activity.user}\n`;
        response += `   ‚Ä¢ A√ß√£o: ${activity.action}\n`;
        response += `   ‚Ä¢ IP: ${activity.ip}\n`;
        response += `   ‚Ä¢ Risco: ${activity.riskLevel}\n\n`;
    });
    
    // Padr√µes de hor√°rio por usu√°rio
    response += "**Padr√µes de Hor√°rio por Usu√°rio:**\n";
    timeData.userPatterns.forEach(pattern => {
        response += `‚Ä¢ ${pattern.user}: ${pattern.usualHours}\n`;
        if (pattern.anomalies > 0) {
            response += `  ‚ö†Ô∏è ${pattern.anomalies} acessos fora do padr√£o\n`;
        }
    });
    response += "\n";
    
    // Estat√≠sticas temporais
    response += "**Estat√≠sticas:**\n";
    response += `‚Ä¢ Hor√°rio de pico: ${timeData.peakHour}\n`;
    response += `‚Ä¢ Atividade noturna: ${timeData.nightActivity}%\n`;
    response += `‚Ä¢ Fins de semana: ${timeData.weekendActivity}%\n\n`;
    
    response += "**Recomenda√ß√µes:**\n";
    response += "‚Ä¢ Configurar alertas para atividades ap√≥s 22h\n";
    response += "‚Ä¢ Implementar aprova√ß√£o adicional para fins de semana\n";
    response += "‚Ä¢ Monitorar padr√µes an√¥malos de usu√°rios";
    
    return response;
}

/**
 * Analisa performance do sistema
 */
async function analyzePerformance(question) {
    const perfData = await getPerformanceData();
    
    let response = "‚ö° **An√°lise de Performance do Sistema**\n\n";
    
    // M√©tricas gerais
    response += "**M√©tricas Gerais:**\n";
    response += `‚Ä¢ Tempo m√©dio de resposta: ${perfData.avgResponseTime}ms\n`;
    response += `‚Ä¢ Uptime: ${perfData.uptime}%\n`;
    response += `‚Ä¢ Requests por minuto: ${perfData.requestsPerMinute}\n`;
    response += `‚Ä¢ Taxa de erro: ${perfData.errorRate}%\n\n`;
    
    // Opera√ß√µes mais lentas
    response += "**Opera√ß√µes Mais Lentas:**\n";
    perfData.slowOperations.forEach(op => {
        response += `‚Ä¢ ${op.operation}: ${op.avgTime}ms (${op.count} execu√ß√µes)\n`;
    });
    response += "\n";
    
    // Gargalos identificados
    if (perfData.bottlenecks.length > 0) {
        response += "**üö® Gargalos Identificados:**\n";
        perfData.bottlenecks.forEach(bottleneck => {
            response += `‚Ä¢ ${bottleneck.component}: ${bottleneck.description}\n`;
        });
        response += "\n";
    }
    
    // Tend√™ncias
    response += "**Tend√™ncias:**\n";
    response += `‚Ä¢ Performance vs. ontem: ${perfData.trend > 0 ? 'üìà' : 'üìâ'} ${Math.abs(perfData.trend)}%\n`;
    response += `‚Ä¢ Pico de uso: ${perfData.peakUsage}\n\n`;
    
    response += "**Recomenda√ß√µes:**\n";
    response += "‚Ä¢ Otimizar opera√ß√µes de assinatura digital\n";
    response += "‚Ä¢ Implementar cache para consultas frequentes\n";
    response += "‚Ä¢ Monitorar uso de recursos em tempo real";
    
    return response;
}

/**
 * Gera relat√≥rio de seguran√ßa
 */
async function generateSecurityReport(question) {
    const reportData = await getSecurityReportData();
    
    let response = "üìä **Relat√≥rio de Seguran√ßa - √öltimos 7 Dias**\n\n";
    
    // Resumo executivo
    response += "**üìã Resumo Executivo:**\n";
    response += `‚Ä¢ ${reportData.totalEvents} eventos de seguran√ßa processados\n`;
    response += `‚Ä¢ ${reportData.criticalEvents} incidentes cr√≠ticos\n`;
    response += `‚Ä¢ ${reportData.anomalies} anomalias comportamentais\n`;
    response += `‚Ä¢ ${reportData.uptime}% de disponibilidade\n\n`;
    
    // Principais riscos
    response += "**üö® Principais Riscos Identificados:**\n";
    reportData.topRisks.forEach((risk, index) => {
        response += `${index + 1}. ${risk.description} (${risk.severity})\n`;
    });
    response += "\n";
    
    // Usu√°rios de alto risco
    if (reportData.highRiskUsers.length > 0) {
        response += "**üë§ Usu√°rios de Alto Risco:**\n";
        reportData.highRiskUsers.forEach(user => {
            response += `‚Ä¢ ${user.name}: ${user.riskFactors.join(', ')}\n`;
        });
        response += "\n";
    }
    
    // Tend√™ncias
    response += "**üìà Tend√™ncias:**\n";
    response += `‚Ä¢ Tentativas de acesso: ${reportData.trends.accessAttempts}\n`;
    response += `‚Ä¢ Uso de certificados: ${reportData.trends.certificateUsage}\n`;
    response += `‚Ä¢ Atividade suspeita: ${reportData.trends.suspiciousActivity}\n\n`;
    
    // Recomenda√ß√µes estrat√©gicas
    response += "**üéØ Recomenda√ß√µes Estrat√©gicas:**\n";
    reportData.recommendations.forEach(rec => {
        response += `‚Ä¢ ${rec}\n`;
    });
    
    return response;
}

/**
 * Analisa anomalias detectadas
 */
async function analyzeAnomalies(question) {
    const anomalyData = await getAnomalyData();
    
    let response = "üîç **An√°lise de Anomalias Detectadas**\n\n";
    
    // Anomalias cr√≠ticas
    if (anomalyData.critical.length > 0) {
        response += "**üö® ANOMALIAS CR√çTICAS:**\n";
        anomalyData.critical.forEach(anomaly => {
            response += `‚Ä¢ ${anomaly.description}\n`;
            response += `  Usu√°rio: ${anomaly.user} | Detectado: ${anomaly.timestamp}\n`;
            response += `  A√ß√£o requerida: ${anomaly.action}\n\n`;
        });
    }
    
    // Anomalias comportamentais
    response += "**üë§ Anomalias Comportamentais:**\n";
    anomalyData.behavioral.forEach(anomaly => {
        response += `‚Ä¢ ${anomaly.user}: ${anomaly.pattern}\n`;
        response += `  Desvio: ${anomaly.deviation} (${anomaly.confidence}% confian√ßa)\n`;
    });
    response += "\n";
    
    // Anomalias de rede
    response += "**üåê Anomalias de Rede:**\n";
    anomalyData.network.forEach(anomaly => {
        response += `‚Ä¢ ${anomaly.type}: ${anomaly.description}\n`;
        response += `  Origem: ${anomaly.source} | Frequ√™ncia: ${anomaly.frequency}\n`;
    });
    response += "\n";
    
    // Score de risco geral
    response += "**üìä Score de Risco Geral:**\n";
    response += `‚Ä¢ Sistema: ${anomalyData.systemRisk}/10\n`;
    response += `‚Ä¢ Usu√°rios: ${anomalyData.userRisk}/10\n`;
    response += `‚Ä¢ Rede: ${anomalyData.networkRisk}/10\n\n`;
    
    response += "**Pr√≥ximos Passos:**\n";
    response += "‚Ä¢ Investigar anomalias cr√≠ticas imediatamente\n";
    response += "‚Ä¢ Implementar controles adicionais para usu√°rios de risco\n";
    response += "‚Ä¢ Atualizar regras de detec√ß√£o baseadas nos padr√µes";
    
    return response;
}

/**
 * Gera an√°lise geral
 */
async function generateGeneralAnalysis(question) {
    const generalData = await getGeneralSystemData();
    
    let response = "ü§ñ **An√°lise Geral do Sistema CertGuard AI**\n\n";
    
    response += "**üìä Status Atual:**\n";
    response += `‚Ä¢ Sistema: ${generalData.systemStatus} (${generalData.uptime}% uptime)\n`;
    response += `‚Ä¢ Usu√°rios ativos: ${generalData.activeUsers}/${generalData.totalUsers}\n`;
    response += `‚Ä¢ Certificados v√°lidos: ${generalData.validCertificates}\n`;
    response += `‚Ä¢ Eventos processados hoje: ${generalData.eventsToday}\n\n`;
    
    response += "**üîí Seguran√ßa:**\n";
    response += `‚Ä¢ N√≠vel de amea√ßa: ${generalData.threatLevel}\n`;
    response += `‚Ä¢ Incidentes ativos: ${generalData.activeIncidents}\n`;
    response += `‚Ä¢ Score de seguran√ßa: ${generalData.securityScore}/100\n\n`;
    
    response += "**üìà Performance:**\n";
    response += `‚Ä¢ Tempo m√©dio de resposta: ${generalData.avgResponseTime}ms\n`;
    response += `‚Ä¢ Throughput: ${generalData.throughput} req/min\n`;
    response += `‚Ä¢ Recursos utilizados: ${generalData.resourceUsage}%\n\n`;
    
    response += "**üéØ Insights Principais:**\n";
    generalData.insights.forEach(insight => {
        response += `‚Ä¢ ${insight}\n`;
    });
    response += "\n";
    
    response += "**üí° Recomenda√ß√µes:**\n";
    response += "‚Ä¢ Continuar monitoramento em tempo real\n";
    response += "‚Ä¢ Revisar pol√≠ticas de seguran√ßa mensalmente\n";
    response += "‚Ä¢ Implementar melhorias baseadas em ML\n\n";
    
    response += "Para an√°lises mais espec√≠ficas, pergunte sobre:\n";
    response += "‚Ä¢ Usu√°rios espec√≠ficos ou atividades\n";
    response += "‚Ä¢ Certificados e assinaturas digitais\n";
    response += "‚Ä¢ Anomalias e incidentes de seguran√ßa\n";
    response += "‚Ä¢ Performance e m√©tricas do sistema";
    
    return response;
}

/**
 * Obt√©m fontes de dados para an√°lise
 */
function getAnalysisDataSources(question) {
    const sources = [];
    const questionLower = question.toLowerCase();
    
    if (questionLower.includes('usu√°rio') || questionLower.includes('login')) {
        sources.push('logs de acesso');
    }
    if (questionLower.includes('ip')) {
        sources.push('an√°lise de rede');
    }
    if (questionLower.includes('certificado')) {
        sources.push('base de certificados');
    }
    if (questionLower.includes('hor√°rio') || questionLower.includes('tempo')) {
        sources.push('an√°lise temporal');
    }
    if (questionLower.includes('performance')) {
        sources.push('m√©tricas de sistema');
    }
    
    return sources.length > 0 ? sources : ['an√°lise geral', 'logs de auditoria'];
}

/**
 * Atualiza cache de dados de seguran√ßa
 */
async function updateSecurityCache() {
    const now = new Date();
    if (!securityCache.lastUpdate || (now - securityCache.lastUpdate) > 300000) { // 5 minutos
        try {
            // Simula atualiza√ß√£o de dados em tempo real
            securityCache = {
                recentEvents: await getRecentSecurityEvents(),
                userProfiles: await getUserProfiles(),
                anomalies: await getRecentAnomalies(),
                lastUpdate: now
            };
        } catch (error) {
            console.error('Erro ao atualizar cache:', error);
        }
    }
}

// Fun√ß√µes de dados simulados (em produ√ß√£o, fariam chamadas para API real)

async function getUserActivityData() {
    return {
        recentActivity: [
            {
                name: "Jo√£o Silva",
                username: "joao.silva",
                loginCount: 15,
                uniqueIPs: 2,
                lastLogin: "2024-01-27 14:30:00",
                suspicious: false
            },
            {
                name: "Maria Santos",
                username: "maria.santos",
                loginCount: 8,
                uniqueIPs: 1,
                lastLogin: "2024-01-27 16:20:00",
                suspicious: false
            },
            {
                name: "Pedro Hacker",
                username: "pedro.hacker",
                loginCount: 25,
                uniqueIPs: 8,
                lastLogin: "2024-01-27 03:15:00",
                suspicious: true,
                suspiciousReason: "M√∫ltiplos IPs e acesso noturno"
            }
        ],
        securityAlerts: [
            {
                severity: "high",
                description: "15 tentativas de login falhadas do IP 10.0.0.15"
            },
            {
                severity: "medium",
                description: "Acesso fora do hor√°rio comercial detectado"
            }
        ]
    };
}

async function getIPAnalysisData() {
    return {
        suspiciousIPs: [
            {
                address: "10.0.0.15",
                location: "Desconhecida",
                attempts: 25,
                failures: 15,
                users: ["pedro.hacker"],
                riskLevel: "Alto"
            },
            {
                address: "203.45.67.89",
                location: "China",
                attempts: 5,
                failures: 5,
                users: ["unknown"],
                riskLevel: "Cr√≠tico"
            }
        ],
        geoAnomalies: [
            {
                user: "joao.silva",
                country: "Estados Unidos",
                usual: "Brasil"
            }
        ],
        totalUniqueIPs: 45,
        blockedIPs: 3,
        successRate: 87.5
    };
}

async function getCertificateAnalysisData() {
    return {
        certificates: [
            {
                subjectName: "Jo√£o Silva",
                type: "A1",
                serialNumber: "2345678901BCDEFG",
                status: "active",
                recentUsage: 89,
                validUntil: "2024-02-01",
                alerts: ["Pr√≥ximo ao vencimento"]
            },
            {
                subjectName: "Pedro Hacker",
                type: "A1",
                serialNumber: "6789012345FGHIJK",
                status: "revoked",
                recentUsage: 0,
                validUntil: "2025-01-20",
                alerts: ["Certificado revogado", "Tentativa de uso detectada"]
            }
        ],
        suspiciousActivity: [
            {
                description: "Tentativa de uso de certificado revogado",
                user: "pedro.hacker",
                timestamp: "2024-01-27 02:15:00"
            }
        ],
        metrics: {
            totalSignatures: 156,
            mostUsed: "Maria Santos (A3)",
            avgSignTime: 2.8
        }
    };
}

async function getTimeAnalysisData() {
    return {
        offHoursActivity: [
            {
                timestamp: "2024-01-26 23:45:00",
                user: "joao.silva",
                action: "Assinatura de documento",
                ip: "192.168.1.150",
                riskLevel: "low"
            },
            {
                timestamp: "2024-01-27 02:15:00",
                user: "pedro.hacker",
                action: "Tentativa de login",
                ip: "10.0.0.15",
                riskLevel: "high"
            }
        ],
        userPatterns: [
            {
                user: "joao.silva",
                usualHours: "08:00-18:00",
                anomalies: 1
            },
            {
                user: "maria.santos",
                usualHours: "09:00-17:00",
                anomalies: 0
            }
        ],
        peakHour: "14:00",
        nightActivity: 5.2,
        weekendActivity: 12.8
    };
}

async function getPerformanceData() {
    return {
        avgResponseTime: 1200,
        uptime: 99.97,
        requestsPerMinute: 156,
        errorRate: 0.3,
        slowOperations: [
            {
                operation: "Assinatura digital",
                avgTime: 2800,
                count: 89
            },
            {
                operation: "Valida√ß√£o de certificado",
                avgTime: 1500,
                count: 234
            }
        ],
        bottlenecks: [
            {
                component: "M√≥dulo de assinatura",
                description: "Alto tempo de processamento"
            }
        ],
        trend: -5.2,
        peakUsage: "14:00-15:00"
    };
}

async function getSecurityReportData() {
    return {
        totalEvents: 1247,
        criticalEvents: 3,
        anomalies: 15,
        uptime: 99.97,
        topRisks: [
            {
                description: "Tentativas de for√ßa bruta",
                severity: "Alto"
            },
            {
                description: "Uso de certificado revogado",
                severity: "Cr√≠tico"
            },
            {
                description: "Acesso fora do hor√°rio",
                severity: "M√©dio"
            }
        ],
        highRiskUsers: [
            {
                name: "Pedro Hacker",
                riskFactors: ["M√∫ltiplos IPs", "Hor√°rio suspeito", "Certificado revogado"]
            }
        ],
        trends: {
            accessAttempts: "+15%",
            certificateUsage: "+8%",
            suspiciousActivity: "+25%"
        },
        recommendations: [
            "Implementar bloqueio autom√°tico de IPs suspeitos",
            "Configurar alertas para atividades noturnas",
            "Revisar pol√≠ticas de renova√ß√£o de certificados",
            "Implementar MFA para usu√°rios de alto risco"
        ]
    };
}

async function getAnomalyData() {
    return {
        critical: [
            {
                description: "Tentativa de acesso com certificado revogado",
                user: "pedro.hacker",
                timestamp: "2024-01-27 02:15:00",
                action: "Bloquear usu√°rio imediatamente"
            }
        ],
        behavioral: [
            {
                user: "pedro.hacker",
                pattern: "Acesso em hor√°rios an√¥malos",
                deviation: "3.2œÉ",
                confidence: "95%"
            }
        ],
        network: [
            {
                type: "IP suspeito",
                description: "M√∫ltiplas tentativas de acesso falhadas",
                source: "10.0.0.15",
                frequency: "15 tentativas/hora"
            }
        ],
        systemRisk: 6,
        userRisk: 8,
        networkRisk: 7
    };
}

async function getGeneralSystemData() {
    return {
        systemStatus: "Operacional",
        uptime: 99.97,
        activeUsers: 5,
        totalUsers: 6,
        validCertificates: 5,
        eventsToday: 156,
        threatLevel: "M√©dio",
        activeIncidents: 1,
        securityScore: 85,
        avgResponseTime: 1200,
        throughput: 156,
        resourceUsage: 68,
        insights: [
            "Sistema operando dentro dos par√¢metros normais",
            "1 usu√°rio suspenso por atividade suspeita",
            "Performance est√°vel nas √∫ltimas 24h",
            "Aumento de 15% em tentativas de acesso n√£o autorizado"
        ]
    };
}

// Fun√ß√µes auxiliares para dados em tempo real
async function getRecentSecurityEvents() {
    // Simula eventos recentes
    return [];
}

async function getUserProfiles() {
    // Simula perfis de usu√°rio
    return {};
}

async function getRecentAnomalies() {
    // Simula anomalias recentes
    return [];
}

// Exporta fun√ß√µes principais
window.askAdvancedLucia = askAdvancedLucia;
window.analyzeSecurityQuestion = analyzeSecurityQuestion;

